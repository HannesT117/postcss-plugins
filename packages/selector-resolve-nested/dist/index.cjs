"use strict";var e=require("postcss-selector-parser");function sourceFrom(e){return{sourceIndex:e.sourceIndex??0,source:e.source}}function sortCompoundSelectorsInsideComplexSelector(o){const r=[];let t=[];o.each((o=>{if("combinator"===o.type)return r.push(t,[o]),void(t=[]);if(e.isPseudoElement(o))return r.push(t),void(t=[o]);if("universal"===o.type&&t.find((e=>"universal"===e.type)))o.remove();else{if("tag"===o.type&&t.find((e=>"tag"===e.type))){o.remove();const r=e.selector({value:"",...sourceFrom(o)});r.append(o);const n=e.pseudo({value:":is",...sourceFrom(o)});return n.append(r),void t.push(n)}t.push(o)}})),r.push(t);const n=[];for(let e=0;e<r.length;e++){const o=r[e];o.sort(((e,o)=>selectorTypeOrder(e)-selectorTypeOrder(o))),n.push(...o)}o.removeAll();for(let e=n.length-1;e>=0;e--)n[e].remove(),o.prepend(n[e])}function selectorTypeOrder(r){return e.isPseudoElement(r)?o.pseudoElement:o[r.type]}const o={universal:0,tag:1,pseudoElement:2,nesting:3,id:4,class:5,attribute:6,pseudo:7,comment:8};function prepareParentSelectors(o,r=!1){if(r||!isCompoundSelector(o.nodes)){const r=e.pseudo({value:":is",...sourceFrom(o)});return o.nodes.forEach((e=>{r.append(e.clone())})),[r]}return o.nodes[0].nodes.map((e=>e.clone()))}function isCompoundSelector(o){return 1===o.length&&!o[0].nodes.some((o=>"combinator"===o.type||e.isPseudoElement(o)))}exports.resolveNestedSelector=function resolveNestedSelector(o,r){const t=[];for(let n=0;n<o.nodes.length;n++){const s=o.nodes[n].clone();{let o=!1;s.walkNesting((()=>(o=!0,!1))),o?"combinator"===s.nodes[0]?.type&&s.prepend(e.nesting({...sourceFrom(s)})):(s.prepend(e.combinator({value:" ",...sourceFrom(s)})),s.prepend(e.nesting({...sourceFrom(s)})))}{const e=new Set;s.walkNesting((o=>{const t=o.parent;e.add(t),"pseudo"===t.parent?.type&&":has"===t.parent.value?.toLowerCase()?o.replaceWith(...prepareParentSelectors(r,!0)):o.replaceWith(...prepareParentSelectors(r))}));for(const o of e)sortCompoundSelectorsInsideComplexSelector(o)}s.walk((e=>{"combinator"===e.type&&""!==e.value.trim()?(e.rawSpaceAfter=" ",e.rawSpaceBefore=" "):(e.rawSpaceAfter="",e.rawSpaceBefore="")})),t.push(s)}const n=e.root({value:"",...sourceFrom(o)});return t.forEach((e=>{n.append(e)})),n};
