import e from"postcss-selector-parser";function sourceFrom(e){return{sourceIndex:e.sourceIndex??0,source:{start:{line:e.source?.start?.line??0,column:e.source?.start?.column??0},end:{line:e.source?.end?.line??0,column:e.source?.end?.column??0}}}}function sortCompoundSelectorsInsideComplexSelector(o){const r=[];let t=[];o.each((o=>{if("combinator"===o.type)return r.push(t,[o]),void(t=[]);if(e.isPseudoElement(o))return r.push(t),void(t=[o]);if("universal"===o.type&&t.find((e=>"universal"===e.type)))o.remove();else{if("tag"===o.type&&t.find((e=>"tag"===e.type))){o.remove();const r=e.pseudo({value:":is",...sourceFrom(o)});return r.append(e.selector({nodes:[o],value:"",...sourceFrom(o)})),void t.push(r)}t.push(o)}})),r.push(t);const n=[];for(let e=0;e<r.length;e++){const o=r[e];o.sort(((e,o)=>selectorTypeOrder(e)-selectorTypeOrder(o))),n.push(...o)}o.removeAll();for(let e=n.length-1;e>=0;e--)n[e].remove(),o.prepend(n[e])}function selectorTypeOrder(r){return e.isPseudoElement(r)?o.pseudoElement:o[r.type]}const o={universal:0,tag:1,pseudoElement:2,nesting:3,id:4,class:5,attribute:6,pseudo:7,comment:8};function resolveNestedSelector(o,r){const t=[];for(let n=0;n<o.nodes.length;n++){const s=o.nodes[n].clone();{let o=!1;s.walkNesting((()=>(o=!0,!1))),o?"combinator"===s.nodes[0]?.type&&s.prepend(e.nesting({...sourceFrom(s)})):(s.prepend(e.combinator({value:" ",...sourceFrom(s)})),s.prepend(e.nesting({...sourceFrom(s)})))}{const e=new Set;s.walkNesting((o=>{const t=o.parent;e.add(t),"pseudo"===t.parent?.type&&":has"===t.parent.value?.toLowerCase()?o.replaceWith(...prepareParentSelectors(r,!0)):o.replaceWith(...prepareParentSelectors(r))}));for(const o of e)sortCompoundSelectorsInsideComplexSelector(o)}s.walk((e=>{"combinator"===e.type&&""!==e.value.trim()?(e.rawSpaceAfter=" ",e.rawSpaceBefore=" "):(e.rawSpaceAfter="",e.rawSpaceBefore="")})),t.push(s)}return e.root({nodes:t,value:"",...sourceFrom(o)})}function prepareParentSelectors(o,r=!1){return r||!isCompoundSelector(o.nodes)?[e.pseudo({value:":is",nodes:o.nodes.map((e=>e.clone())),...sourceFrom(o)})]:o.nodes[0].nodes.map((e=>e.clone()))}function isCompoundSelector(o){return 1===o.length&&!o[0].nodes.some((o=>"combinator"===o.type||e.isPseudoElement(o)))}export{resolveNestedSelector};
